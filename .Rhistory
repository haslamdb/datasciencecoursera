qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
help(sprintf)
pollutantmean <- function(directory, pollutant, id = 1:332) {
z<-as.numeric(length(id))
sumTotal <-0
obsTotal <-0
site<-0
sumPollutant<-0
meanPollutant<-0
p<-ifelse(pollutant=="sulfate", 2,
(ifelse(pollutant=="nitrate", 3, "Error")))
for (i in 1:z) {
site<-sprintf("%03i", id[i])
filepath<-paste(directory, site, sep="/")
filename<-paste(filepath, ".csv", sep="")
files<-read.csv(filename)
sumPollutant<- as.numeric(colSums(files[p], na.rm=TRUE))
sumTotal<-sumTotal+ sumPollutant
obs<-as.numeric(length(files[,p][! is.na(files[,p])]))
obsTotal<-obsTotal + obs
}
options(digits=4)
meanPollutant<-sumTotal/obsTotal
meanPollutant
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
corr <- function(directory, threshold = 0) {
cr<-vector()
for (i in 1:332) {
id<-1:332
site<-sprintf("%03d", id[i])
filepath<-paste(directory, site, sep="/")
filename<-paste(filepath, ".csv", sep="")
file<-read.csv(filename)
file<-na.omit(file)
if (length(file[ ,1]) > threshold) {cr[[i]]<-cor(file$nitrate, file$sulfate)}
}
cr<-na.omit(cr)
}
corr("specdata", 400)
corr <- function(directory, threshold = 0) {
cr<-vector()
for (i in 1:332) {
id<-1:332
site<-sprintf("%03i", id[i])
filepath<-paste(directory, site, sep="/")
filename<-paste(filepath, ".csv", sep="")
file<-read.csv(filename)
file<-na.omit(file)
if (length(file[ ,1]) > threshold) {cr[[i]]<-cor(file$nitrate, file$sulfate)}
}
cr<-na.omit(cr)
head(cr,10)
}
corr("specdata", 150)
corr("specdata", 400)
data<-read.csv("activity.csv", header = TRUE, stringsAsFactor=FALSE)
data<-read.csv("activity.csv", header = TRUE, stringsAsFactor=FALSE)
View(data)
str(data)
data$date<-as.Date(data$date)
str(data)
data<-read.csv("activity.csv", header = TRUE, stringsAsFactor=FALSE)
data$date<-as.Date(data$date, format="%Y-%m-%d")
View(data)
is.na(data$steps)
table(is.na(data$steps))
str(data)
qplot(steps, data=data, geom="histogram")
qplot(date, data=data, geom="histogram")
qplot(date~steps, data=data, geom="histogram")
m <- ggplot(data, aes(x=date))
m + geom_histogram()
m <- ggplot(data, aes(x=steps))
m + geom_histogram()
m + geom_histogram(binwidth=5)
m + geom_histogram(binwidth=5) + xlim(200)
m + geom_histogram(binwidth=5) + + scale_x_log10()
m + geom_histogram(binwidth=5) + scale_x_log10()
m + geom_histogram(binwidth=5)
m + geom_histogram(binwidth=10)
m + geom_histogram(binwidth=50)
m + geom_histogram(binwidth=50) + scale_x_log10()
m + geom_histogram(binwidth=50) + scale_x_log2()
m + geom_histogram(binwidth=50)
date2<-aggregate(data$steps, as.Date(data$date)), mean)
date2<-aggregate(data$steps, as.Date(data$date), mean)
aggdata <-aggregate(data, by=(date), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(data, by=c(date), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(data, by=c(date, steps), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(data, by=c(data$date, data$steps), FUN=mean, na.rm=TRUE)
attach(data)
aggdata <-aggregate(data, by=c(date, steps), FUN=mean, na.rm=TRUE)
aggdata <-aggregate(data, by=c(as.Date(date), steps), FUN=mean, na.rm=TRUE)
AggDate <- aggregate(steps ~ date, data, FUN = mean, na.rm = TRUE)
View(AggDate)
detach(data)
m <- ggplot(AggDate, aes(x=steps))
m + geom_histogram(binwidth=50)
m + geom_histogram(binwidth=5)
meanSteps<-mean(AggData$steps)
meanSteps<-mean(AggDate$steps)
meanSteps
medianSteps<-median(AggDate$steps)
medianSteps
aggDate <- aggregate(steps ~ date, data, FUN = mean, na.rm = TRUE)
m <- ggplot(aggDate, aes(x=steps))
m + geom_histogram(binwidth=5)
meanSteps<-mean(aggDate$steps)
meanSteps
medianSteps<-median(aggDate$steps)
medianSteps
summary(data)
24 x 60
24x60
1 + 1
24 * 60
1440 / 5
plot(data$interval, data$steps)
steps<-ggplot(data, aes(steps, interval))
steps + geom_line()
steps<-ggplot(data, aes(interval, steps))
steps + geom_line()
steps<-ggplot(data, aes(interval, steps), color=date)
steps + geom_line()
aggInterval<-aggregate(steps ~ interval, data, FUN=mean, na.rm = TRUE)
View(aggInterval)
intervalPlot<- ggplot(aggInterval, aes(interval, steps))
intervalPlot + geom_point()
intervalPlot + geom_point() + geom_line()
maxSteps<-which(max(aggInterval$steps))
maxSteps<-max(aggInterval$steps)
maxInterval<-subset(aggInterval, max(aggInterval$steps))
maxInterval<-subset(aggInterval, aggInterval$steps==max(aggInterval$steps))
maxInterval
maxInterval$interval
missingIntervals<-length(is.na(data$steps))
missingIntervals
length(data$steps)
missingIntervals<-count(is.na(data$steps))
missingIntervals<-sum(is.na(data$steps))
missingIntervals
install.packages("Amelia")
library(Amelia)
AmeliaView
summary(data)
newData<-amelia(data, 1, steps)
install.packages("mice")
library(mice)
imputed_data = complete( mice( data ))
imputed_data =  mice( data ))
imputed_data =  mice( data )
View(aggInterval)
dataNew<-merge(data, aggInterval, by=c(Interval), all.x=TRUE)
View(aggInterval)
dataNew<-merge(data, aggInterval, by=c(interval), all.x=TRUE)
View(data)
View(aggInterval)
dataNew<-merge(data, aggInterval, by=c(interval), all.x=TRUE)
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
View(dataNew)
for (i in 1:length(dataNew$interval)){
if (is.na(dataNew$steps.x), dataNew$steps ==dataNew$steps.y)
}
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
for (i in 1:length(dataNew$interval)){
if (is.na(dataNew$steps.x), dataNew$steps ==dataNew$steps.y)
}
for (i in 1:length(dataNew$interval)){
if (is.na(dataNew$steps.x)) { dataNew$steps ==dataNew$steps.y)}
}
for (i in 1:length(dataNew$interval))
{
if (is.na(dataNew$steps.x)), dataNew$steps ==dataNew$steps.y)}
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
for (i in 1:length(dataNew$interval))
{
if (is.na(dataNew$steps.x)) dataNew$steps ==dataNew$steps.y)}
for (i in 1:length(dataNew$interval))
{
if (is.na(dataNew$steps.x)) dataNew$steps ==dataNew$steps.y}
View(dataNew)
warnings()
tapply(if (is.na(dataNew$steps.x)) dataNew$steps ==dataNew$steps.y)
newData<-amelia(data, m=5, ts="date")
newData[1]
newData<- newData[1]
newData<-amelia(data, m=5, ts="date")
imputeData<- data.frame(newData[1])
View(imputeData)
head(newData, 100)
head(newData)
head(newData[1])
naData<-subset(dataNew, is.na(dataNew))
View(naData)
naData<-subset(dataNew, dataNew$steps==is.na(dataNew$steps))
naData<-subset(dataNew, dataNew$steps.x==is.na(dataNew$steps.x))
View(naData)
View(dataNew)
newData<-amelia(data, m=10, ts="date")
imputeData<-data.frame(newData)
imputeData<-data.frame(newData[1])
View(imputeData)
for (i in 1:length(dataNew$interval))
{if (is.na(dataNew$steps.x)) dataNew$steps<-dataNew$steps.y)}
for (i in 1:length(dataNew$interval)) {
if (is.na(dataNew$steps.x)) {
dataNew$steps<-dataNew$steps.y
}
}
View(dataNew)
for (i in 1:length(dataNew$interval)) {
if (is.na(dataNew$steps.x)) {
dataNew$steps.x<-dataNew$steps.y
}
}
View(dataNew)
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
for (i in 1:length(dataNew$interval)) {
if (is.na(dataNew$steps.x)) {
dataNew$steps.x<-dataNew$steps.y
}
}
View(dataNew)
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
for (i in 1:length(dataNew$interval)) {
if (is.na(dataNew$steps.x)) {
dataNew$impSteps<-dataNew$steps.y
}
}
View(dataNew)
warnings()
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
for (i in 1:length(dataNew$interval)) {
if (is.na(dataNew$steps.x[i])) {
dataNew$impSteps[i]<-dataNew$steps.y[i]
}
}
View(dataNew)
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
View(dataNew)
for (i in 1:length(dataNew$interval)) {
if (is.na(dataNew$steps.x[i])) {
dataNew$steps.x[i]<-dataNew$steps.y[i], dataNew$steps.x[i]<-dataNew$steps.x
}
}
for (i in 1:length(dataNew$interval)) {
elseif (is.na(dataNew$steps.x[i])) {
dataNew$steps.x[i]<-dataNew$steps.y[i], dataNew$steps.x[i]<-dataNew$steps.x
}
}
for (i in 1:length(dataNew$interval)) {
elseif (is.na(dataNew$steps.x[i])) {
)dataNew$steps.x[i]<-dataNew$steps.y[i]), (dataNew$steps.x[i]<-dataNew$steps.x)
}
}
meanImpute <- function(x){
if (is.na(x)) {
dataNew$steps.x<-dataNew$steps.y
}
meanImpute <- function(x){
if (is.na(x)) {
dataNew$steps.x<-dataNew$steps.y
}
}
dataNew2<-tapply(dataNew, meanImpute)
help(tapply)
meanImpute <- function(x){
if (is.na(dataNew$steps.x)) {
dataNew$steps.x<-dataNew$steps.y
}
}
dataNew2<-tapply(dataNew, meanImpute)
meanImpute <- function(x){
if (x)) {
dataNew$steps.x<-dataNew$steps.y
}
}
meanImpute <- function(x){
if (x)) {
dataNew$steps.x<-dataNew$steps.y
}
}
meanImpute <- function(x){
if (is.na(x)) {
dataNew$steps.x<-dataNew$steps.y
}
}
dataNew2<-tapply(dataNew$steps.x, meanImpute)
dataNew2<-tapply(dataNew$steps.x, FUN = meanImpute)
for (i in 1:nrow(newData)) {
meanImpute(dataNew$steps[i])
}
nrow(newData)
for (i in 1:nrow(dataNew)) {
meanImpute(dataNew$steps[i])
}
nrow(dataNew)
for (i in 1:nrow(dataNew)) {
if (is.na(dataNew$steps.x[i])) {
dataNew$steps.x[i]<-dataNew$steps.y[i]
}
}
View(dataNew)
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
for (i in 1:nrow(dataNew)) {
if (is.na(dataNew$steps.x[i])) {
dataNew$steps.x[i]<-dataNew$steps.y[i]
}
}
View(dataNew)
summary(dataNew)
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
summary(dataNew)
for (i in 1:nrow(dataNew)) {
if (is.na(dataNew$steps.x[i])) {
dataNew$steps.x[i]<-dataNew$steps.y[i]
}
}
summary(dataNew)
View(dataNew)
View(data)
dataImpute<-dataNew[2,3,1]
dataImpute<-dataNew[,c(2,3,1)]
View(dataNew)
View(dataImpute)
names(dataImpute)<- c("steps", "date", "interval")
View(dataImpute)
imputePlot <- ggplot(dataImpute, aes(x=steps))
imputePlot + geom_histogram(binwidth=5)
meanImpute<-mean(dataImpute$steps)
meanImpute
medianImpute<-median(dataImpute$steps)
medianImpute
datePlot <- ggplot(aggDate, aes(x=steps))
datePlot + geom_histogram(binwidth=5)
meanSteps<-mean(aggDate$steps)
meanSteps
medianSteps<-median(aggDate$steps)
medianSteps
aggImpute <- aggregate(steps ~ date, dataImpute, FUN = mean, na.rm = TRUE)
imputePlot <- ggplot(aggImpute, aes(x=steps))
imputePlot + geom_histogram(binwidth=5)
meanImpute<-mean(aggImpute$steps)
meanImpute
medianImpute<-median(aggImpute$steps)
medianImpute
imputePlot <- ggplot(aggImpute, aes(x=steps))
imputePlot + geom_histogram(binwidth=5)
imputePlot <- ggplot(aggImpute, aes(x=steps))
imputePlot + geom_histogram(binwidth=1)
imputePlot <- ggplot(aggImpute, aes(x=steps))
imputePlot + geom_histogram(binwidth=10)
datePlot <- ggplot(aggDate, aes(x=steps))
datePlot + geom_histogram(binwidth=10)
imputePlot <- ggplot(aggImpute, aes(x=steps))
imputePlot + geom_histogram(binwidth=10)
weekday(dataImpute$date)
weekdays(dataImpute$date)
weekdays<-c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekends<- c("Saturday", "Sunday")
dataImpute$weekday<-ifelse(dataImpute$date %in% weekdays, "wd", "we" ))
dataImpute$weekday<-ifelse(dataImpute$date %in% weekdays, "wd", "we" )
View(dataImpute)
dataImpute$weekday<-ifelse(weekdays(dataImpute$date) %in% weekdays, "wd", "we" )
View(dataImpute)
weekdayData<-aggregate(steps ~ interval + weekday, dataImpute, FUN=mean, na.rm = TRUE)
View(weekdayData)
weekdayPlot<- ggplot(weekdayData, aes(interval, steps))
weekdayPlot + geom_point() + geom_line()
weekdayPlot<- ggplot(weekdayData, aes(interval, steps))
weekdayPlot + geom_point() + geom_line() + facet_grid(.weekday)
weekdayPlot + geom_point() + geom_line() + facet_grid(.~weekday)
dataImpute$weekday<-ifelse(weekdays(dataImpute$date) %in% weekdays, "weekday", "weekend" )
weekdayData<-aggregate(steps ~ interval + weekday, dataImpute, FUN=mean, na.rm = TRUE)
weekdayPlot<- ggplot(weekdayData, aes(interval, steps))
weekdayPlot + geom_point() + geom_line() + facet_grid(.~weekday)
weekdayPlot<- ggplot(weekdayData, aes(interval, steps))
weekdayPlot + geom_point() + geom_line() + facet_grid(weekday ~ .)
source('~/Code/R/Projects/Coursera/Reproducible.R', echo=TRUE)
source('~/Code/R/Projects/Coursera/Reproducible.R', echo=TRUE)
aggInterval<-aggregate(steps ~ interval, aggDate, FUN=mean, na.rm = TRUE)
View(aggDate)
aggInterval<-aggregate(steps ~ interval, data, FUN=mean, na.rm = TRUE)
View(aggInterval)
intervalPlot<- ggplot(aggInterval, aes(interval, steps))
intervalPlot + geom_point() + geom_line()
maxSteps<-max(aggInterval$steps)
maxInterval<-subset(aggInterval, aggInterval$steps==max(aggInterval$steps))
maxInterval$interval
source('~/Code/R/Projects/Coursera/Reproducible.R', echo=TRUE)
data<-read.csv("activity.csv", header = TRUE, stringsAsFactor=FALSE)
```
# Reproducible Research : Assignment 1
data<-read.csv("activity.csv", header = TRUE, stringsAsFactor=FALSE)
data$date<-as.Date(data$date, format="%Y-%m-%d")
# What is mean total number of steps taken per day?
aggDate <- aggregate(steps ~ date, data, FUN = mean, na.rm = TRUE)
datePlot <- ggplot(aggDate, aes(x=steps))
datePlot + geom_histogram(binwidth=10)
meanSteps<-mean(aggDate$steps)
meanSteps
medianSteps<-median(aggDate$steps)
medianSteps
# What is the average daily activity pattern?
aggInterval<-aggregate(steps ~ interval, data, FUN=mean, na.rm = TRUE)
intervalPlot<- ggplot(aggInterval, aes(interval, steps))
intervalPlot + geom_point() + geom_line()
maxSteps<-max(aggInterval$steps)
maxInterval<-subset(aggInterval, aggInterval$steps==max(aggInterval$steps))
maxInterval$interval
# Imputing missing values
missingIntervals<-sum(is.na(data$steps))
missingIntervals
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
for (i in 1:nrow(dataNew)) {
if (is.na(dataNew$steps.x[i])) {
dataNew$steps.x[i]<-dataNew$steps.y[i]
}
}
dataImpute<-dataNew[,c(2,3,1)]
names(dataImpute)<- c("steps", "date", "interval")
aggImpute <- aggregate(steps ~ date, dataImpute, FUN = mean, na.rm = TRUE)
imputePlot <- ggplot(aggImpute, aes(x=steps))
imputePlot + geom_histogram(binwidth=10)
meanImpute<-mean(aggImpute$steps)
meanImpute
medianImpute<-median(aggImpute$steps)
medianImpute
# Are there differences in activity patterns between weekdays and weekends?
weekdays<-c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekends<- c("Saturday", "Sunday")
dataImpute$weekday<-ifelse(weekdays(dataImpute$date) %in% weekdays, "weekday", "weekend" )
weekdayData<-aggregate(steps ~ interval + weekday, dataImpute, FUN=mean, na.rm = TRUE)
weekdayPlot<- ggplot(weekdayData, aes(interval, steps))
weekdayPlot + geom_point() + geom_line() + facet_grid(weekday ~ .)
```{r}
getwd()
data<-read.csv("~/Coursera"activity.csv", header = TRUE, stringsAsFactor=FALSE)
data<-read.csv("~/Coursera/activity.csv", header = TRUE, stringsAsFactor=FALSE)
data<-read.csv("~Projects/R/Coursera/activity.csv", header = TRUE, stringsAsFactor=FALSE)
data<-read.csv("~R/Projects/Coursera/activity.csv", header = TRUE, stringsAsFactor=FALSE)
data<-read.csv("~ /R/Projects/Coursera/activity.csv", header = TRUE, stringsAsFactor=FALSE)
data<-read.csv("~ Code/R/Projects/Coursera/activity.csv", header = TRUE, stringsAsFactor=FALSE)
data<-read.csv("~ /Code/R/Projects/Coursera/activity.csv", header = TRUE, stringsAsFactor=FALSE)
getwd()
data<-read.csv("C:/Users/David/Documents/Code/R/Projects/Coursera/activity.csv", header = TRUE, stringsAsFactor=FALSE)
knit2html(PA1_template.Rmd)
library(ggplot2); library(knitr)
install.packages("markdown")
library(ggplot2); library(knitr); library(markdown)
knit2html(input=PA1_template.Rmd, output=PA1_template.HTML)
knit2html(input="PA1_template.Rmd", output="PA1_template.HTML")
knit2html(input="PA1_template.Rmd", output="PA1_template.HTML")
knit2html(input="PA1_template.Rmd", output="PA1_template.HTML")
knit2html(input="PA1_template.Rmd", output="PA1_template.HTML")
# Reproducible Research : Assignment 1
library(ggplot2); library(knitr); library(markdown)
setwd("C:/Users/David/Documents/Code/R/Projects/Coursera")
data<-read.csv("activity.csv", header = TRUE, stringsAsFactor=FALSE)
data$date<-as.Date(data$date, format="%Y-%m-%d")
# What is mean total number of steps taken per day?
aggDate <- aggregate(steps ~ date, data, FUN = mean, na.rm = TRUE)
datePlot <- ggplot(aggDate, aes(x=steps))
datePlot + geom_histogram(binwidth=10)
meanSteps<-mean(aggDate$steps)
meanSteps
medianSteps<-median(aggDate$steps)
medianSteps
# What is the average daily activity pattern?
aggInterval<-aggregate(steps ~ interval, data, FUN=mean, na.rm = TRUE)
intervalPlot<- ggplot(aggInterval, aes(interval, steps))
intervalPlot + geom_point() + geom_line()
maxSteps<-max(aggInterval$steps)
maxInterval<-subset(aggInterval, aggInterval$steps==max(aggInterval$steps))
maxInterval$interval
# Imputing missing values
missingIntervals<-sum(is.na(data$steps))
missingIntervals
dataNew<-merge(data, aggInterval, by=c("interval"), all.x=TRUE)
for (i in 1:nrow(dataNew)) {
if (is.na(dataNew$steps.x[i])) {
dataNew$steps.x[i]<-dataNew$steps.y[i]
}
}
dataImpute<-dataNew[,c(2,3,1)]
names(dataImpute)<- c("steps", "date", "interval")
aggImpute <- aggregate(steps ~ date, dataImpute, FUN = mean, na.rm = TRUE)
imputePlot <- ggplot(aggImpute, aes(x=steps))
imputePlot + geom_histogram(binwidth=10)
meanImpute<-mean(aggImpute$steps)
meanImpute
medianImpute<-median(aggImpute$steps)
medianImpute
# Are there differences in activity patterns between weekdays and weekends?
weekdays<-c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekends<- c("Saturday", "Sunday")
dataImpute$weekday<-ifelse(weekdays(dataImpute$date) %in% weekdays, "weekday", "weekend" )
weekdayData<-aggregate(steps ~ interval + weekday, dataImpute, FUN=mean, na.rm = TRUE)
weekdayPlot<- ggplot(weekdayData, aes(interval, steps))
weekdayPlot + geom_point() + geom_line() + facet_grid(weekday ~ .)
